name: Firebase Upload

on:
  push:
    branches:
      - main # Change to your default branch if different

jobs:
  upload-images:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18' # Or any other version you prefer

    - name: Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Install dependencies
      run: npm install firebase-admin

    - name: Set up Firebase Admin SDK credentials
      env:
        FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
      run: |
        echo "${FIREBASE_SERVICE_ACCOUNT}" > "${HOME}/firebase-service-account.json"

    - name: Deploy to Firebase
      run: |
        node -e "
        var admin = require('firebase-admin');
        var serviceAccount = require('${HOME}/firebase-service-account.json');
        admin.initializeApp({
          credential: admin.credential.cert(serviceAccount),
          databaseURL: 'https://fe-repo.firebaseio.com'
        });
        const firestore = admin.firestore();

        const directories = [
          'BGs, Interface Elements',
          'Class Cards',
          'Item Icons',
          'Map Sprites',
          'Portrait Repository',
          'Battle Animations'
        ];

        const isTargetFile = (filePath, directory) => {
          const ext = path.extname(filePath);
          const base = path.basename(filePath);
          if (['BGs, Interface Elements', 'Class Cards', 'Item Icons', 'Map Sprites', 'Portrait Repository'].includes(directory)) {
            return ext === '.png';
          } else if (directory === 'Battle Animations') {
            return ext === '.gif' || (ext === '.png' && base.includes('_000'));
          }
          return false;
        };
        const getFiles = (dir, directory) => {
          let results = [];
          const list = fs.readdirSync(dir);
          list.forEach(file => {
            file = path.join(dir, file);
            const stat = fs.statSync(file);
            if (stat && stat.isDirectory()) {
              results = results.concat(getFiles(file, directory));
            } else {
              if (isTargetFile(file, directory)) {
                results.push(file);
              }
            }
          });
          return results;
        };
        const uploadToFirebase = async (directory, filePath) => {
          //const relativePath = path.relative(process.cwd(), filePath);
          //const fileName = path.basename(filePath);
          consle.log(directory);
          consle.log(filePath);
          //const downloadUrl = `https://raw.githubusercontent.com/JakubOwadowski/FE-Repo/refs/heads/main/${relativePath}`;

          //await firestore.collection(directory).add({
          //  filename: fileName,
          //  url: downloadUrl
          //});
        };

        (async () => {
          for (const directory of directories) {
            console.log(directory);
            const files = getFiles(directory, directory);
            for (const file of files) {
                console.log(file)
            //  await uploadToFirebase(directory, file);
           }
          }
          console.log('Files successfully uploaded to Firebase.');
        })();
        "
